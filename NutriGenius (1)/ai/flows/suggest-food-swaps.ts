// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Suggests alternative food options based on the current meal plan and provides explanations for why the suggested food is a good replacement.
 *
 * - suggestFoodSwaps - A function that handles the suggestion of alternative food options.
 * - SuggestFoodSwapsInput - The input type for the suggestFoodSwaps function.
 * - SuggestFoodSwapsOutput - The return type for the suggestFoodSwaps function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestFoodSwapsInputSchema = z.object({
  mealPlan: z
    .string()
    .describe('The current meal plan for the user.'),
  foodItem: z.string().describe('The food item to be replaced.'),
  dietaryRestrictions: z
    .string()
    .optional()
    .describe('The dietary restrictions of the user (e.g., vegetarian, non-vegetarian, gluten-free).'),
  healthGoals: z
    .string()
    .optional()
    .describe('The health goals of the user.'),
});
export type SuggestFoodSwapsInput = z.infer<typeof SuggestFoodSwapsInputSchema>;

const SuggestFoodSwapsOutputSchema = z.object({
  alternativeFood: z.string().describe('The suggested alternative food option.'),
  explanation: z
    .string()
    .describe('The explanation for why the suggested food is a good replacement.'),
});
export type SuggestFoodSwapsOutput = z.infer<typeof SuggestFoodSwapsOutputSchema>;

export async function suggestFoodSwaps(input: SuggestFoodSwapsInput): Promise<SuggestFoodSwapsOutput> {
  return suggestFoodSwapsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestFoodSwapsPrompt',
  input: {schema: SuggestFoodSwapsInputSchema},
  output: {schema: SuggestFoodSwapsOutputSchema},
  prompt: `You are an expert nutritionist. Given the user's current meal plan, the food item they want to replace, their dietary restrictions, and health goals, suggest a suitable alternative food option.

Current Meal Plan:
{{{mealPlan}}}

Food Item to Replace: {{{foodItem}}}

User's Dietary Restrictions: {{{dietaryRestrictions}}}
User's Health Goals: {{{healthGoals}}}

Instructions for Suggestion:
1.  **Prioritize Dietary Restrictions:** The suggestion MUST strictly adhere to the user's dietary restrictions. For example, if the user is "vegetarian", do NOT suggest meat or fish. If the user specifies "non-vegetarian" or has no restrictions implying vegetarianism, you can suggest non-vegetarian alternatives if appropriate.
2.  **Maintain Food Type if Possible:** If the original 'Food Item to Replace' is non-vegetarian (e.g., chicken, beef, fish, eggs) and the user's 'Dietary Restrictions' permit non-vegetarian food, try to suggest another non-vegetarian alternative. If the original item is vegetarian, suggest a vegetarian alternative.
3.  **Consider Health Goals:** The alternative should align with the user's health goals (e.g., if for weight loss, suggest a lower-calorie option).
4.  **Nutritional Value:** The alternative should ideally offer similar or better nutritional value if possible, or be a good fit for the meal context.
5.  **Practicality:** Suggest common and reasonably accessible food items.

Output:
Provide the 'alternativeFood' and a brief 'explanation' for why it's a good replacement, considering the above points. If the user's dietary restriction is "non-vegetarian" and they are swapping a non-vegetarian item like "Spicy Scrambled Eggs with Chicken Sausage", you should suggest another non-vegetarian item like "Turkey Bacon and Scrambled Eggs" or "Grilled Chicken Salad components" if it fits, rather than a vegetarian item like "Tofu Scramble", unless "Tofu Scramble" is explicitly requested or is the only way to meet other constraints (e.g. very specific calorie goal and no other non-veg option fits).

Suggest an alternative food option and explain why it is a good replacement.`,
});

const suggestFoodSwapsFlow = ai.defineFlow(
  {
    name: 'suggestFoodSwapsFlow',
    inputSchema: SuggestFoodSwapsInputSchema,
    outputSchema: SuggestFoodSwapsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

